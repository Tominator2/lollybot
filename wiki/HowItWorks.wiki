#summary This page provides an overview of how the software works.
#labels Phase-Design,Featured

= Introduction =

The <a href="http://code.google.com/p/suckerbot/">original version of the control and telemetry code</a> for Lollybot grew out of code I had written for various <a href="http://www.tomtilley.net/projects/">projects that used hacked joysticks</a>.  The code was written in Object Pascal using Delphi.  Unfortunately, there are currently no free versions of Delphi available (although <a href="http://www.lazarus.freepascal.org/">Lazarus</a> is a possible alternative) so students wanting to build or modify the code for themselves would have to pay for a development  environment.  In addition this code will only run on Windows machines.

My teenage son had been learning some JavaScript in an after-school class and suggested that I make an HTML5/JavaScript version of the code that could run in a web-browser.  I thought this would be a great idea - the tools to develop or modify the code would be free and it would be cross-platform.  Unfortunately, web-browsers are sandboxed so the browser wouldn't be able to communicate with the robot via USB.   

The solution was to use <a href="http://nodejs.org">Node.js</a> - a stand alone version of Google's <a href="http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29">V8 JavaScript engine</a> that could talk to the robot via USB and send/receive data from a web-page.


= Overview =

The software uses a plug-in for Node.js called <a href="https://github.com/hanshuebner/node-hid">node-hid<a> that can communicate with USB devices like keyboards, mice, bar-code readers, joysticks, etc. Node-hid is a JavaScript wrapper for the <a href="http://www.signal11.us/oss/hidapi/">HID API</a> library. Another plug-in called <a href="http://socket.io/">Socket.IO</a> is used to send telemetry data and receive control signals to/from a web-interface written in HTML5 + JavaScript (see the image below).  

http://lollybot.googlecode.com/files/local.jpg

Both Node.js and the web-browser can be run on the same machine but it is also possible to connect to a Node.js server running on another machine over a network (via the "Settings" panel on the Lollybot software).  Node.js is available for Windows, Linux, and Mac OS and the web-interface will run in any modern HTML5 compliant browser so this provides an environment for Lollybot that is cross-platform, free, and the client can be running across a network. See the image below.

http://lollybot.googlecode.com/files/distributed.jpg

= Server Code =

The Node.js server code is in the file '<a href="http://code.google.com/p/lollybot/source/browse/trunk/%20lollybot/lollybot-server.js">lollybot-server.js</a>'.  It also relies on another plug-in called <a href="https://npmjs.org/package/commander">Commander.js</a> which is used to read command-line options for the server. 

= Client Code =

The HTML mark-up, JavaScript code, and CSS layout for the web-interface client are contained in three files:
  * <a href="http://code.google.com/p/lollybot/source/browse/trunk/+lollybot/index.html">index.html</a>,  
  * <a href="http://code.google.com/p/lollybot/source/browse/trunk/%20lollybot/scripts/lollybot-0.1.0.js">lollybot-0.1.0.js</a> in the 'scripts/' directory, and
  * <a href="http://code.google.com/p/lollybot/source/browse/trunk/%20lollybot/css/lollybot.css">lollybot.css</a> in the 'css/' directory' 
The JavaScript code also makes use of:
  * <a href="http://jquery.com/">jQuery</a> which abstracts over browser differences and makes JavaScript easier to use,
  * the <a href="http://omnipotent.net/jquery.sparkline/#s-about">jQuery.Sparklines</a> plugin which is used to draw the analog joystick graphs, and
  * the client-side code for <a href="http://socket.io/">Socket.IO</a>.